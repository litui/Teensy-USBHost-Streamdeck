/*
Copyright 2024 Aria Burrell <litui@litui.ca>

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the “Software”),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

Some ideas borrowed from the python-elgato-streamdeck library.
Credit to:
   dean [at] fourwalledcubicle [dot] com
         www.fourwalledcubicle.com
*/
#pragma once
#include <Arduino.h>
#include <USBHost_t36.h>
#include <circular_buffer.h>
#include <queue>

// This number of report buffers should be enough for 2-3 images to fully
// buffer. Try to aim for around 3-5 kBytes max per JPG (remove exif data).
#ifndef STREAMDECK_IMAGE_OUTPUT_BUFFERS
#define STREAMDECK_IMAGE_OUTPUT_BUFFERS                                        \
  8 // @ 1024 bytes each, must be exponent of 2
#endif

namespace Streamdeck {

// 72 x 72 black JPEG
const uint8_t BLANK_KEY_IMAGE[] = {
    0xff, 0xd8, 0xff, 0xe0, 0x00, 0x10, 0x4a, 0x46, 0x49, 0x46, 0x00, 0x01,
    0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0xff, 0xdb, 0x00, 0x43,
    0x00, 0x08, 0x06, 0x06, 0x07, 0x06, 0x05, 0x08, 0x07, 0x07, 0x07, 0x09,
    0x09, 0x08, 0x0a, 0x0c, 0x14, 0x0d, 0x0c, 0x0b, 0x0b, 0x0c, 0x19, 0x12,
    0x13, 0x0f, 0x14, 0x1d, 0x1a, 0x1f, 0x1e, 0x1d, 0x1a, 0x1c, 0x1c, 0x20,
    0x24, 0x2e, 0x27, 0x20, 0x22, 0x2c, 0x23, 0x1c, 0x1c, 0x28, 0x37, 0x29,
    0x2c, 0x30, 0x31, 0x34, 0x34, 0x34, 0x1f, 0x27, 0x39, 0x3d, 0x38, 0x32,
    0x3c, 0x2e, 0x33, 0x34, 0x32, 0xff, 0xdb, 0x00, 0x43, 0x01, 0x09, 0x09,
    0x09, 0x0c, 0x0b, 0x0c, 0x18, 0x0d, 0x0d, 0x18, 0x32, 0x21, 0x1c, 0x21,
    0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32,
    0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32,
    0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32,
    0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32,
    0x32, 0x32, 0xff, 0xc0, 0x00, 0x11, 0x08, 0x00, 0x48, 0x00, 0x48, 0x03,
    0x01, 0x22, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 0x01, 0xff, 0xc4, 0x00,
    0x1f, 0x00, 0x00, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
    0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0xff, 0xc4, 0x00, 0xb5, 0x10, 0x00,
    0x02, 0x01, 0x03, 0x03, 0x02, 0x04, 0x03, 0x05, 0x05, 0x04, 0x04, 0x00,
    0x00, 0x01, 0x7d, 0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21,
    0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07, 0x22, 0x71, 0x14, 0x32, 0x81,
    0x91, 0xa1, 0x08, 0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52, 0xd1, 0xf0, 0x24,
    0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x25,
    0x26, 0x27, 0x28, 0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a,
    0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x53, 0x54, 0x55, 0x56,
    0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a,
    0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x83, 0x84, 0x85, 0x86,
    0x87, 0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99,
    0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3,
    0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6,
    0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9,
    0xda, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf1,
    0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xff, 0xc4, 0x00,
    0x1f, 0x01, 0x00, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
    0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0xff, 0xc4, 0x00, 0xb5, 0x11, 0x00,
    0x02, 0x01, 0x02, 0x04, 0x04, 0x03, 0x04, 0x07, 0x05, 0x04, 0x04, 0x00,
    0x01, 0x02, 0x77, 0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21, 0x31,
    0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71, 0x13, 0x22, 0x32, 0x81, 0x08,
    0x14, 0x42, 0x91, 0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33, 0x52, 0xf0, 0x15,
    0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34, 0xe1, 0x25, 0xf1, 0x17, 0x18,
    0x19, 0x1a, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38, 0x39,
    0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x53, 0x54, 0x55,
    0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
    0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x82, 0x83, 0x84,
    0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
    0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa,
    0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4,
    0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7,
    0xd8, 0xd9, 0xda, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea,
    0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xff, 0xda, 0x00,
    0x0c, 0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11, 0x00, 0x3f, 0x00, 0xf9,
    0xfe, 0x8a, 0x28, 0xa0, 0x02, 0x8a, 0x28, 0xa0, 0x02, 0x8a, 0x28, 0xa0,
    0x02, 0x8a, 0x28, 0xa0, 0x02, 0x8a, 0x28, 0xa0, 0x02, 0x8a, 0x28, 0xa0,
    0x02, 0x8a, 0x28, 0xa0, 0x02, 0x8a, 0x28, 0xa0, 0x02, 0x8a, 0x28, 0xa0,
    0x02, 0x8a, 0x28, 0xa0, 0x02, 0x8a, 0x28, 0xa0, 0x02, 0x8a, 0x28, 0xa0,
    0x02, 0x8a, 0x28, 0xa0, 0x02, 0x8a, 0x28, 0xa0, 0x02, 0x8a, 0x28, 0xa0,
    0x02, 0x8a, 0x28, 0xa0, 0x02, 0x8a, 0x28, 0xa0, 0x02, 0x8a, 0x28, 0xa0,
    0x02, 0x8a, 0x28, 0xa0, 0x02, 0x8a, 0x28, 0xa0, 0x02, 0x8a, 0x28, 0xa0,
    0x02, 0x8a, 0x28, 0xa0, 0x02, 0x8a, 0x28, 0xa0, 0x02, 0x8a, 0x28, 0xa0,
    0x02, 0x8a, 0x28, 0xa0, 0x0f, 0xff, 0xd9};

class StreamdeckController : public USBHIDInput {
public:
  StreamdeckController(USBHost &host) { init(); }
  StreamdeckController(USBHost *host) { init(); }

public:
  void setBrightness(float percent);
  void flushImageReports();
  void setKeyImage(const uint16_t keyIndex, const uint8_t *image,
                   const uint16_t length);
  void setKeyBlank(const uint16_t keyIndex);
  void blankAllKeys();
  uint16_t getNumKeys() { return num_states; };
  void reset();

  // Call these to attach your own function hooks
  void attachSinglePress(void (*f)(StreamdeckController *sdc,
                                   const uint16_t keyIndex,
                                   const uint8_t newValue,
                                   const uint8_t oldValue)) {
    singleStateChangedFunction = f;
  }
  void attachAnyChange(void (*f)(StreamdeckController *sdc,
                                 const uint8_t *newStates,
                                 const uint8_t *oldStates)) {
    anyStateChangedFunction = f;
  }

protected:
  enum report_type_t {
    HID_REPORT_TYPE_UNKNOWN = 0,
    HID_REPORT_TYPE_IN = 1,
    HID_REPORT_TYPE_OUT = 2,
    HID_REPORT_TYPE_FEATURE = 3,
  };

  struct __attribute__((packed)) streamdeck_in_report_type_t {
    uint8_t reportType;
    uint8_t headerField1;
    uint16_t stateCount;
    uint8_t states[508];
  };

  struct __attribute__((packed)) streamdeck_out_report_type_t {
    uint8_t reportType;
    uint8_t command;
    uint8_t buttonId;
    uint8_t isFinal;
    uint16_t payloadLength; // little endian
    uint16_t payloadNumber; // little endian
    uint8_t payload[1016];
  };

  struct __attribute__((packed)) streamdeck_feature_report_type_t {
    uint8_t reportType;
    uint8_t request;
    uint8_t value;
    uint8_t filler[29];
  };

  virtual hidclaim_t claim_collection(USBHIDParser *driver, Device_t *dev,
                                      uint32_t topusage);
  virtual void disconnect_collection(Device_t *dev);
  virtual bool hid_process_in_data(const Transfer_t *transfer);
  virtual bool hid_process_out_data(const Transfer_t *transfer);
  virtual bool hid_process_control(const Transfer_t *transfer);
  virtual void hid_input_begin(uint32_t topusage, uint32_t type, int lgmin,
                               int lgmax) {
    Serial.println("Input begin...");
  };
  virtual void hid_input_data(uint32_t usage, int32_t value) {
    Serial.println("Input data...");
  };
  virtual void hid_input_end() { Serial.println("Input end..."); };

private:
  void init();
  bool setReport(const uint8_t reportType, const uint8_t reportId,
                 const uint8_t interface, void *buffer,
                 const uint16_t bufferLength = 8U);

  void (*singleStateChangedFunction)(StreamdeckController *sdc,
                                     const uint16_t keyIndex,
                                     const uint8_t newValue,
                                     const uint8_t oldValue);
  void (*anyStateChangedFunction)(StreamdeckController *sdc,
                                  const uint8_t *newStates,
                                  const uint8_t *oldStates);

  // Number of widget/key states to track (for different Stream Deck devices)
  uint16_t num_states = 0;
  uint8_t *states;

  // Uncached transfer buffers large enough to hold our outbound report packets
  // (image slices with header data).
  uint8_t drv_tx1_[sizeof(streamdeck_out_report_type_t)];
  uint8_t drv_tx2_[sizeof(streamdeck_out_report_type_t)];

  // A circular buffer for stowing uncached outbound (image) reports until the
  // isr has time to send them out. This works alongside a separate queue to
  // ensure reports get sent out eventually regardless of transfer
  // buffer state. uint8_t out_report[sizeof(streamdeck_out_report_type_t) *
  // STREAMDECK_IMAGE_OUTPUT_BUFFERS];
  Circular_Buffer<uint8_t, STREAMDECK_IMAGE_OUTPUT_BUFFERS,
                  sizeof(streamdeck_out_report_type_t)>
      out_report;

  // Separate queue for marking only pending reports to be sent.
  std::queue<uint32_t> pending_out_reports;

  bool processingInData = false;

  uint8_t collections_claimed = 0;
  USBHIDParser *driver_;

  Pipe_t mypipes[3] __attribute__((aligned(32)));
  Transfer_t mytransfers[5] __attribute__((aligned(32)));
};

} // namespace Streamdeck